
====================================================================
        PDQ (Pretty Damn Quick) Queueing Analyzer v4.2
====================================================================
PDQ is an analytic queueing circuit analyzer made freely available under
GPL copyright from www.perfdynamics.com (See the COPYRIGHT file for the
legal gore).

Main features of PDQ 4.2

    1.  Java version of PDQ (by Peter Harding)

    2.  PHP version of PDQ (by Italian student Samuel Zallocco)

    3.  Threaded-server model and errata corrections (by Neil Gunther)

    4.  Better organization of the Perl and Python models

====================================================================
*******************  DISCLAIMER OF WARRANTY ************************
====================================================================Performance Dynamics Company(SM) and Neil J. Gunther make no warranty,
express or implied, that the source code contained PDQ or in the  book
are free from error, or are consistent with any particular standard of
merchantability, or that they will meet your requirements for a
particular application. They should not be relied upon for solving a
problem whose correct solution could result in injury to a person or
loss of property. The author disclaims all liability for direct or
consequential damages resulting from your use of this source code.
====================================================================

This software is intended to accompany the following books:

    "Guerrilla Capacity Planning" (GCAP)
     by Neil J. Gunther, 
     Springer-Verlag, 2007
     ISBN: 3540261389

    The accompanying PDQ models for the GCAP book are located in the directory
    ../examples/gcap_2007/

     
    "Analyzing Computer System Performance Using Perl::PDQ" (PPDQ)
     by Neil J. Gunther, 
     Springer-Verlag, 2005
     ISBN: 3540208658

    PDQ models for the PPDQ book are located in the directory
    ../examples/ppdq_2005/


    "The Practical Performance Analyst" (PPA)
     by Neil J. Gunther
     McGraw-Hill Companies (1998) ISBN: 0-079-12946-3 (First edition)
     iUniverse Press Inc., (2000) ISBN: 0-595-12674-X (Reprint edition)
     
    PDQ models (in C code) for the PPA book are located in
    ../examples/ppa-1998/


Various and sundry PDQ models can also be found in
../examples/misc/    

A complete synopsis of the PDQ functions in Perl can be found in Chapter 6 of the Perl::PDQ book.


====================================================================

Top-level directories
---------------------

COPYRIGHT*      
Makefile*       
examples/        - PDQ models discussed in the books above       
perl5/           - Perl5 support          
tools/           - Miscellaneous translators
Getversion*      - Script to report version of PDQ
README*          - This file         
java/            - Stand alone PDQ in Eclipse-based Java         
php/             - Stand alone PDQ PDQ in PHP (*untested*) 
Makeall*         - Used to install PDQ (see next section)         
bin/             - Java support
lib/             - PDQ library in C            
python/          - Python support 

Examples directory
------------------

Makefile        - Make all PDQ models in the sub-directories        
gcap_2007/      - Contains Perl script PDQ models for GCAP book (2007)      
misc/           - Odds and sods (see next section)           
ppa_1998/       - Contains C-code PDQ models for PPA book (1998/2000)  
                  Also contains some Perl and Python versions of the same models, but not guaranteed to wr
ppdq_2005/      - Contains Perl script PDQ models for PPDQ book (2005)


Misc directory
--------------

These PDQ models were developed independently of the books mentioned above.

diskoptim.pl*   - Optimize response time for I/Os going to a fast & slow disk   
jackpdq.py*     - Jackson network problem in PDQ
jacksim.py*     - Corresponding Jackson network in SimPy simulator code
threadapp.pl*   - Threaded application model
floggit.py*     - M/M/1 queue model in PyDQ
spamcan.pl*     - Model of email spam-filters running on a 4-way SMP

====================================================================

Installing the Perl PDQ Module
--------------------------------
The Perl interpreter, needed to run PDQ, is intrinsic to a wide 
variety of platforms.  In general, it is already installed on UNIX or Linux 
platforms, so the following sequence of  commands can be used to install the 
PDQ perl module:

The PERL module is built and installed by the Makeall command which will
be run by doing a 'make' in the top level directory.

It may be built manually by as follows:

  Change to the pdq subdirectory:  cd pdq and locate the directory perl5/
  Change to that directory:  cd perl5
  Run the setup script:  ./setup.sh
  Go back up to the pdq directory:  cd ..
  You should be able to run the code examples provided.

More explicit instructions can be found at the web site www.perfdynamics.com.
You should also check that web site for any changes regarding future releases 
of PDQ.  You are now ready to execute any of the Perl scripts listed in
in the tables at the back of the book.  A similar procedure can
be applied to the installation of almost any Perl module, including those
from CPAN (\url{www.cpan.org}).

For other Perl environments, such as MacPerl (MacOS), ModPerl (Apache),
Active Perl (Microsoft Windows), you should consult the appropriate
documentation for the correct installation procedure.
Installation notes for ActiveState Perl have been provided by Tom Becker 
and can be read from the PDQ download page:
http://www.perfdynamics.com/Tools/PDQcode.html

A brief tutorial on performance modeling can be found at
http://www.perfdynamics.com/Tools/PDQ.html

Visit the blog http://perfdynamics.blogspot.com/ for additional
information on the book and other performance-related resources.


=======================================================================

Installation Gotchas
--------------------

The following items are typical of the installation problems that can prevent Perl PDQ models from executing.

- Line termination in ASCII files. 
  Check CR/LF conventions in your environment.

- Permissions problems
  If you don't have root privileges, you will need to install the
  PERL module to a lib/ directory that is local to you.

- Pathing problems
  The Perl interpreter has to be able to find the pdq.pm module.
  The typical error message for this begins 
  "Can't locate pdq.pm in @INC (@INC contains: ...."
  
  To facilitate finding it on my MacOS X G4, for example, I had to export the UNIX environment variable PERL5LIB using the shell command:
  setenv PERL5LIB /Users/njg///lib/perl5/site_perl/5.8.6/darwin-.../
  You should then include this env var in your .cshrc or whatever login profile you use.
  
  Check this variable using the command:
  echo $PERL5LIB

*** See the README file in the Perl5/ directory for more details ***


Installing Python PDQ
---------------------

a)   Run Makeall at the top-level directory (standard build).

       $ make

     or

       $ Makeall

b)   Build manually as follows:

       $ cd python
       $ make
       $ ./test.py     # to test


NOTES:
1)   If using standard system installs of Perl and Python on UNIX
     and Linux systems, you will need superuser (root) privileges
     to install the Perl and Python modules into the system
     default locations.

2)   See README in perl5 directory for what to do if you do
     not have root access and cannot install PERL and Python
     into normal system wide locations.
     
====================================================================

Perl Puzzle
-----------

perl -le '@q=qw(Perl PDQ); $s= "\115\141\171\040\171\157\165\162 @q \bs 
\142\145"; $q[0]=~s/e/ea/; @q=reverse @q; $s.=" @q \bs!"; print $s'


