pbinom(x=1, size=6, prob=1/6)
# Q2.5 ==========
pbinom(x=1/6, size=6, prob=1/6)
# Q2.5 ==========
pbinom(1/6, size=6, prob=1/6)
# Q2.5 ==========
dbinom(x=1, size=6, prob=1/6)
# Q2.5 ==========
dbinom(x=5, size=6, prob=1/6)
# Q2.5 ==========
dbinom(x=5, size=6, prob=5/6)
# Q2.5 ==========
dbinom(x=1, size=6, prob=5/6)
# Q2.5 ==========
dbinom(x=5, size=6, prob=5/6)
ph <- 3/4
pt <- 1 - ph
tosses <- 10
# p(no heads)
dbinom(x=0, size=tosses, prob=ph)
# p(no heads)
pt^10
# p(one head)
choose(tosses, 9) * pt * ph^9
dbinom(x=1, size=tosses, prob=ph)
choose(tosses, 1) * ph * pt^9
choose(tosses, 5) * pt * ph^5
choose(6, 5) * 5/6 * (1/6)^5
# p(one head)
choose(tosses, 9) * pt * ph^9
dbinom(x=1, size=tosses, prob=ph)
# p(no heads)
pt^10
dbinom(x=0, size=tosses, prob=ph)
# p(one head)
choose(tosses, 9) * pt * ph^9
dbinom(x=1, size=tosses, prob=ph)
choose(tosses, 1) * ph * pt^9
ph
ph^6
1/6
(1/6)^6
log2(6)
ph <- 1/6
pt <- (1 - ph)
pt^5*ph
choose(6,5)
choose(6,1)
choose(1,6)
choose(6,1)
choose(6,6)
choose(6, 5) * 5/6 * (1/6)^5
choose(6, 5) * 5/6^5 * (1/6)
5/6^5 * (1/6)
(5/6)^5 * (1/6)
choose(6, 5) * (5/6)^5 * (1/6)
dbinom(x=1, size=6, prob=1/6)
choose(6, 5) * (5/6)^5 * (1/6)
choose(6,6)
1200/16
source('~/PDQ 6.2.0/pdq/R/pdq/demo/mm1.R')
525 + 740 + 1140
source('~/Desktop/Erlang Dream 2020/erlangB.r')
source('~/Desktop/Erlang Dream 2020/erlangB.r')
erlangB(m, a)
B_erlang(m, lambda / mu) # from 'queueing' lib
dpois(m, lambda, log = FALSE)
dpois(m, lambda) /ppois(m, lambda)
sapply(X=c(1,2,3,4,16,64,128), FUN=erlangB(X,a))
sapply(x=c(1,2,3,4), FUN=erlangB(x,a))
sapply(x=c(1,2,3,4), FUN=erlangB(x))
sapply(x=c(1,2,3,4), FUN=erlangB(x), a)
sapply(x=c(1,2,3,4), FUN=erlangB(x), a=a)
sapply(x=c(1,2,3,4), FUN=erlangB, a=a)
sapply(c(1,2,3,4), FUN=erlangB, a=a)
# B(m,a) as the Poisson ratio
ratPois <- function(m, lambda) {
return(dpois(m, lambda) / ppois(m, lambda))
}
sapply(c(1,2,3,4), FUN=ratPois, a=a)
sapply(c(1,2,3,4), FUN=ratPois, lambda=lambda)
mconfig <- c(1,2,3,4)
sapply(mconfig, FUN=erlangB, a=a)
sapply(mconfig, FUN=ratPois, lambda=lambda)
sapply(mconfig, FUN=ratPois, lambda=a)
<
<
# ansatz transformation
phiB <- function(m,a) {
erlangB(m, a) / (1 - (1 - erlangB(m, a)) * rho)
}
sapply(mconfig, FUN=phiB, a=a)
sapply(mconfig, FUN=C_erlang, a)
sapply(mconfig, FUN=C_erlang, a/m)
sapply(mconfig, FUN=C_erlang, a*m)
sapply(mconfig, FUN=phiB, a=a)
sapply(mconfig, FUN=C_erlang, a*m)
sapply(mconfig, FUN=C_erlang, a/m)
phiB(m, a)
C_erlang(m, lambda / mu)
C_erlang(m, a)
sapply(mconfig, FUN=phiB, a=a)
sapply(mconfig, FUN=C_erlang, r=a)
sapply(mconfig, FUN=C_erlang, a)
sapply(mconfig, FUN=C_erlang, r=a)
rho <- lambda / (m * mu)
# ansatz transformation
phiB <- function(m,a) {
erlangB(m, a) / (1 - (1 - erlangB(m, a)) * rho)
}
phiB(m, a)
C_erlang(m, a)
sapply(mconfig, FUN=phiB, a=a)
sapply(mconfig, FUN=C_erlang, r=a)
sapply(mconfig, FUN=C_erlang, r=a*m)
sapply(mconfig, FUN=C_erlang, r=a/m)
phiB(m=4, a)
C_erlang(m=4, a)
C_erlang(c=4, a)
C_erlang(c=4, m*a)
C_erlang(c=4, a/m)
C_erlang(c=4, r=a)
phiB(m=4, a)
sapply(mconfig, FUN=C_erlang, r=rho)
C_erlang(c=4, r=rho)
phiB(m=4, a)
C_erlang(c=4, r=rho)
C_erlang(c=4, r=m*rho)
# ansatz transformation
phiB <- function(m,a) {
erlangB(m, a) / (1 - (1 - erlangB(m, a)) * a/m)
}
phiB(m=4, a)
C_erlang(c=4, r=m*rho)
phiB(m=4, a)
C_erlang(c=4, r=a)
sapply(mconfig, FUN=phiB, a=a)
sapply(mconfig, FUN=C_erlang, r=a)
source('~/Desktop/Erlang Dream 2020/erlangB.r')
sapply(mconfig, FUN=phiB, a=a)
sapply(mconfig, FUN=C_erlang, r=a)
phiB(m=1, a)
C_erlang(c=1, r=a)
C_erlang(c=1, r=lambda/mu)
erlangB(m, a)
B_erlang(m, lambda / mu) # from 'queueing' lib
erlangB(1, a)
B_erlang(1, lambda / mu) # from 'queueing' lib
erlangB <- function(m, a) {
eB <- a / (1 + a)
for(k in 1:m) {
eB <- eB * a / (a * eB + k)
}
return(eB)
}
erlangB(1, a)
B_erlang(1, lambda / mu) # from 'queueing' lib
erlangB <- function(m, a) {
eB <- a / (1 + a)
for(k in 0:m) {
eB <- eB * a / (a * eB + k)
}
return(eB)
}
erlangB(1, a)
B_erlang(1, lambda / mu) # from 'queueing' lib
erlangB(1, a)
B_erlang(1, lambda / mu) # from 'queueing' lib
sapply(mconfig, FUN=phiB, a=a)
sapply(mconfig, FUN=C_erlang, r=a)
erlangB <- function(m, a) {
eB <- a / (1 + a)
for(k in 2:m) {
eB <- eB * a / (a + k)
}
return(eB)
}
erlangB(1, a)
B_erlang(1, lambda / mu) # from 'queueing' lib
a <- m * rho
erlangB <- function(m, a) {
eB <- a / (1 + a)
for(k in 2:m) {
eB <- eB * a / (a * eB + k)
}
return(eB)
}
erlangB(1, a)
B_erlang(1, lambda / mu) # from 'queueing' lib
2:1
k=1;for(k in 2:1) {print(k)}
k=2;for(k in 2:2) {print(k)}
k=2;for(k in 2:3) {print(k)}
k=1;for(k in 2:3) {print(k)}
k=1;for(k in 2:1) {print(k)}
k=1;for(k in 2:ifelse(k > 1, m, return) {print(k)}
erlangB <- function(m, a) {
if(m == 1) {
eB <- a / (1 + a)
return(eB)
}
for(k in 2:m) {
eB <- eB * a / (a * eB + k)
}
}
erlangB(1, a)
B_erlang(1, lambda / mu) # from 'queueing' lib
erlangB(4, a)
B_erlang(4, lambda / mu) # from 'queueing' lib
erlangB(4, a)
erlangB <- function(m, a) {
eB <- a / (1 + a)
if(m == 1) { return(eB) }
}
for(k in 2:m) {
eB <- eB * a / (a * eB + k)
}
erlangB(4, a)
B_erlang(4, lambda / mu) # from 'queueing' lib
erlangB <- function(m, a) {
eB <- a / (1 + a)
if(m == 1) { return(eB) }
}
for(k in 2:m) {
eB <- eB * a / (a * eB + k)
}
}
erlangB(4, a)
B_erlang(4, lambda / mu) # from 'queueing' lib
erlangB <- function(m, a) {
eB <- a / (1 + a)
if(m == 1) { return(eB) }
}
for(k in 2:m) {
eB <- eB * a / (a * eB + k)
}
return(eB)
}
erlangB(4, a)
B_erlang(4, lambda / mu) # from 'queueing' lib
erlangB <- function(m, a) {
eB <- a / (1 + a)
if(m == 1) { return(eB) }
for(k in 2:m) {
eB <- eB * a / (a * eB + k)
}
return(eB)
}
erlangB(4, a)
B_erlang(4, lambda / mu) # from 'queueing' lib
erlangB(1, a)
B_erlang(1, lambda / mu) # from 'queueing' lib
erlangB(2, a)
B_erlang(2, lambda / mu) # from 'queueing' lib
sapply(mconfig, FUN=erlangB, a=a)
sapply(mconfig, FUN=ratPois, lambda=a)
sapply(mconfig, FUN=phiB, a=a)
sapply(mconfig, FUN=C_erlang, r=a)
Servers <- c(1,2,3,4)
ErlangB <- sapply(Servers, FUN=erlangB, a=a)
Poisson <- sapply(Servers, FUN=ratPois, lambda=a)
phiB <- sapply(Servers, FUN=phiB, a=a)
ErlangC <- sapply(Servers, FUN=C_erlang, r=a)
df.numerics <- data.frame(Servers,ErlangB,Poisson,phiB,ErlangC)
df.numerics
Servers <- c(1,2,3,4,16,64,128)
ErlangB <- sapply(Servers, FUN=erlangB, a=a)
Poisson <- sapply(Servers, FUN=ratPois, lambda=a)
phiB <- sapply(Servers, FUN=phiB, a=a)
ErlangC <- sapply(Servers, FUN=C_erlang, r=a)
df.numerics <- data.frame(Servers,ErlangB,Poisson,phiB,ErlangC)
df.numerics
Servers <- c(1,2,3,4,16,64,128)
ErlangB <- sapply(Servers, FUN=erlangB, a=a)
Poisson <- sapply(Servers, FUN=ratPois, lambda=a)
phiB <- sapply(Servers, FUN=phiB, a=a)
ErlangC <- sapply(Servers, FUN=C_erlang, r=a)
df.numerics <- data.frame(Servers,ErlangB,Poisson,phiB,ErlangC)
df.numerics
ErlangB <- sapply(Servers, FUN=erlangB, a=a)
Poisson <- sapply(Servers, FUN=ratPois, lambda=a)
phiB <- sapply(Servers, FUN=phiB, a=a)
phiB
phiB(m=64, a)
# ansatz transformation
phiB <- function(m,a) {
erlangB(m, a) / (1 - (1 - erlangB(m, a)) * a/m)
}
source('~/Desktop/Erlang Dream 2020/erlangB.r')
df.numerics
Servers
Servers <- c(1,2,3,4,16,64,128)
ErlangB <- sapply(Servers, FUN=erlangB, a=a)
Poisson <- sapply(Servers, FUN=ratPois, lambda=a)
phiB <- sapply(Servers, FUN=phiB, a=a)
phiXform <- sapply(Servers, FUN=phiB, a=a)
ErlangC <- sapply(Servers, FUN=C_erlang, r=a)
df.numerics <- data.frame(Servers,ErlangB,Poisson,phiXform,ErlangC)
df.numerics
# exact R
Rexact <- C_erlang(m, lambda / mu) * (S / m) / (1 - rho) + S # from 'queueing' lib
# morphig model
Rmorph <- S / (1 - rho^m)
# exact R
Rexact <- function(m,a) {
C_erlang(m, a/m) * (S / m) / (1 - a/m) + S
# from 'queueing' lib
}
# morphig model
Rgeom <- function(m,a) { S / (1 - (a/m)^m) }
Rerlang <- sapply(Servers, FUN=Rexact, a=a)
Rmorph <- sapply(Servers, FUN=Rgeom, a=a)
df.numerics <- data.frame(Servers,ErlangB,Poisson,phiXform,ErlangC,Rexact,Rmorph)
phiXform <- sapply(Servers, FUN=phiB, a=a)
df.numerics <- data.frame(Servers,ErlangB,Poisson,phiXform,ErlangC,Rexact,Rmorph)
# ansatz transformation
phiB <- function(m,a) {
erlangB(m, a) / (1 - (1 - erlangB(m, a)) * a/m)
}
phiB(m=64, a)
phiXform <- sapply(Servers, FUN=phiB, a=a)
ErlangC <- sapply(Servers, FUN=C_erlang, r=a)
Rerlang <- sapply(Servers, FUN=Rexact, a=a)
Rmorph <- sapply(Servers, FUN=Rgeom, a=a)
df.numerics <- data.frame(Servers,ErlangB,Poisson,phiXform,ErlangC,Rexact,Rmorph)
df.numerics
df.numerics <- data.frame(Servers,ErlangB,Poisson,phiXform,ErlangC,Rerlang,Rmorph)
df.numerics
1e4/60
1e4/60^2
Servers <- c(1,2,3,4,16,32)
ErlangB <- sapply(Servers, FUN=erlangB, a=a)
Poisson <- sapply(Servers, FUN=ratPois, lambda=a)
phiXform <- sapply(Servers, FUN=phiB, a=a)
ErlangC <- sapply(Servers, FUN=C_erlang, r=a)
Rerlang <- sapply(Servers, FUN=Rexact, a=a)
Rmorph <- sapply(Servers, FUN=Rgeom, a=a)
df.numerics <- data.frame(Servers,ErlangB,Poisson,phiXform,ErlangC,Rerlang,Rmorph)
df.numerics
source('~/Desktop/Erlang Dream 2020/erlangB.r')
source('~/Desktop/Erlang Dream 2020/erlangB.r')
source('~/Desktop/Erlang Dream 2020/erlangB.r')
source('~/Desktop/Erlang Dream 2020/erlangB.r')
source('~/Desktop/Erlang Dream 2020/erlangB.r')
source('~/Desktop/Erlang Dream 2020/erlangB.r')
ErlangB <- sapply(Servers, FUN=erlangB, a=m*rho)
ErlangB
rho
source('~/Desktop/Erlang Dream 2020/erlangB.r')
source('~/Desktop/Erlang Dream 2020/erlangB.r')
Erlangs
source('~/Desktop/Erlang Dream 2020/erlangB.r')
source('~/Desktop/Erlang Dream 2020/erlangB.r')
source('~/Desktop/Erlang Dream 2020/erlangB.r')
m <- c(1,2,3,4,8,16,32)
a <- m * 0.75
ErlangB <- mapply(FUN=erlangB, m=m, a=a)
PoisRat <- mapply(FUN=ratPois, m=m, lambda=a)
ErlangB
PoisRat
source('~/Desktop/Erlang Dream 2020/erlangB.r')
source('~/Desktop/Erlang Dream 2020/erlangB.r')
ErlangC <- mapply(FUN=C_erlang, m=m, r=a)
phiFact
phiFact <- mapply(FUN=phiB, m=m, a=a)
phiFact
Werlang <- mapply(FUN=Wexact, m=m, a=a)
Rerlang <- mapply(FUN=Rexact,m=m,  a=a)
Rmorph  <- mapply(FUN=Rgeom, m=m, a=a)
Rerlang
Rmorph
a
ErlangC <- mapply(FUN=C_erlang, m=m, r=a/m)
ErlangC <- mapply(FUN=C_erlang, c=m, r=a)
source('~/Desktop/Erlang Dream 2020/erlangB.r')
df.numerics <- data.frame(m,a,ErlangB,PoisRat,phiFact,ErlangC,Werlang,Rerlang,Rmorph)
print(df.numerics)
# exact R
Rexact <- function(m,a) {
S + C_erlang(m, a) * (S / m) / (1 - a/m)
# from 'queueing' lib
}
# morphig model
Rgeom <- function(m,a) { S / (1 - (a/m)^m) }
m <- c(1,2,3,4,8,16,32)
a <- m * 0.75
ErlangB <- mapply(FUN=erlangB, m=m, a=a)
PoisRat <- mapply(FUN=ratPois, m=m, lambda=a)
phiFact <- mapply(FUN=phiB, m=m, a=a)
ErlangC <- mapply(FUN=C_erlang, c=m, r=a)
Werlang <- mapply(FUN=Wexact, m=m, a=a)
Rerlang <- mapply(FUN=Rexact,m=m,  a=a)
Rmorph  <- mapply(FUN=Rgeom, m=m, a=a)
df.numerics <- data.frame(m,a,ErlangB,PoisRat,phiFact,ErlangC,Werlang,Rerlang,Rmorph)
print(df.numerics)
Wexact <- function(m,a) {
C_erlang(m, a) * (S / m) / (1 - a/m)
# from 'queueing' lib
}
source('~/Desktop/Erlang Dream 2020/erlangB.r')
print(df.numerics)
source('~/Desktop/BP Wt Track/2020 Data/bp-2020-csv.r')
source('~/Desktop/BP Wt Track/2020 Data/wt-2020-csv.r')
source('~/Desktop/BP Wt Track/2020 Data/bp-2020-csv.r')
source('~/Desktop/BP Wt Track/2020 Data/wt-2020-csv.r')
source('~/Desktop/BP Wt Track/2020 Data/wt-2020-csv.r')
source('~/Desktop/BP Wt Track/2020 Data/bp-2020-csv.r')
source('~/Desktop/BP Wt Track/2020 Data/wt-2020-csv.r')
source('~/Desktop/BP Wt Track/2020 Data/bp-2020-csv.r')
source('~/Desktop/BP Wt Track/2020 Data/bp-2020-csv.r')
source('~/Desktop/BP Wt Track/2020 Data/wt-2020-csv.r')
source('~/Desktop/BP Wt Track/2020 Data/wt-2020-csv.r')
source('~/Desktop/BP Wt Track/2020 Data/bp-2020-csv.r')
150 * 100e^6
150 * 100e6
125 * 100e6
source('~/Desktop/BP Wt Track/2020 Data/bp-2020-csv.r')
source('~/Desktop/BP Wt Track/2020 Data/bp-2020-csv.r')
source('~/Desktop/BP Wt Track/2020 Data/wt-2020-csv.r')
source('~/Desktop/BP Wt Track/2020 Data/wt-2020-csv.r')
source('~/Desktop/BP Wt Track/2020 Data/wt-2020-csv.r')
df
source('~/Desktop/BP Wt Track/2020 Data/bp-2020-csv.r')
source('~/Desktop/BP Wt Track/2020 Data/bp-2020-csv.r')
source('~/Desktop/BP Wt Track/2020 Data/bp-2020-csv.r')
source('~/Desktop/BP Wt Track/2020 Data/wt-2020-csv.r')
source('~/Desktop/BP Wt Track/2020 Data/wt-2020-csv.r')
source('~/Desktop/BP Wt Track/2020 Data/bp-2020-csv.r')
source('~/Desktop/BP Wt Track/2020 Data/bp-2020-csv.r')
source('~/Desktop/BP Wt Track/2020 Data/wt-2020-csv.r')
source('~/Desktop/BP Wt Track/2020 Data/bp-2020-csv.r')
source('~/Desktop/BP Wt Track/2020 Data/bp-2020-csv.r')
source('~/Desktop/BP Wt Track/2020 Data/bp-2020-csv.r')
source('~/Desktop/BP Wt Track/2020 Data/wt-2020-csv.r')
source('~/Desktop/BP Wt Track/2020 Data/wt-2020-csv.r')
source('~/Desktop/BP Wt Track/2020 Data/bp-2020-csv.r')
source('~/Desktop/BP Wt Track/2020 Data/bp-2020-csv.r')
source('~/Desktop/BP Wt Track/2020 Data/bp-2020-csv.r')
source('~/Desktop/BP Wt Track/2020 Data/wt-2020-csv.r')
source('~/Desktop/BP Wt Track/2020 Data/wt-2020-csv.r')
source('~/Desktop/BP Wt Track/2020 Data/wt-2020-csv.r')
source('~/Desktop/BP Wt Track/2020 Data/bp-2020-csv.r')
source('~/Desktop/BP Wt Track/2020 Data/wt-2020-csv.r')
source('~/Desktop/BP Wt Track/2020 Data/bp-2020-csv.r')
source('~/Desktop/BP Wt Track/2020 Data/wt-2020-csv.r')
source('~/Desktop/BP Wt Track/2020 Data/wt-2020-csv.r')
source('~/Desktop/BP Wt Track/2020 Data/bp-2020-csv.r')
source('~/Desktop/BP Wt Track/2020 Data/bp-2020-csv.r')
source('~/Desktop/BP Wt Track/2020 Data/wt-2020-csv.r')
source('~/Desktop/BP Wt Track/2020 Data/wt-2020-csv.r')
source('~/Desktop/BP Wt Track/2020 Data/bp-2020-csv.r')
source('~/Desktop/BP Wt Track/2020 Data/bp-2020-csv.r')
source('~/Desktop/BP Wt Track/2020 Data/bp-2020-csv.r')
source('~/Desktop/BP Wt Track/2020 Data/wt-2020-csv.r')
mean(c(10,rep(0,10)))
mean(c(10,rep(0,100)))
mean(c(100,rep(0,100)))
mean(c(100e9,rep(0,100)))
mean(c(113e9,rep(0,100)))
varean(c(113e9,rep(0,100)))
var(c(113e9,rep(0,100)))
mean(c(100e9,rep(0,100)))
var(c(100e9,rep(0,100)))
sd(c(100e9,rep(0,100)))
100e18
10e19
library(e1071)
skewness
install.packages("e1071")
library(e1071)
skewness(c(100e9,rep(0,100)))
c(100e9,rep(0,100))
qunatile(c(100e9,rep(0,100)))
quantile(c(100e9,rep(0,100)))
incomes <- c(100e9,rep(0,100))
quantile(incomes)
source('~/Desktop/BP Wt Track/2020 Data/wt-2020-csv.r')
source('~/Desktop/BP Wt Track/2020 Data/wt-2020-csv.r')
source('~/Desktop/BP Wt Track/2020 Data/bp-2020-csv.r')
source('~/Desktop/BP Wt Track/2020 Data/bp-2020-csv.r')
source('~/Desktop/BP Wt Track/2020 Data/wt-2020-csv.r')
source('~/Desktop/BP Wt Track/2020 Data/wt-2020-csv.r')
source('~/Desktop/BP Wt Track/2020 Data/wt-2020-csv.r')
source('~/Desktop/BP Wt Track/2020 Data/bp-2020-csv.r')
source('~/Desktop/BP Wt Track/2020 Data/bp-2020-csv.r')
source('~/Desktop/BP Wt Track/2020 Data/wt-2020-csv.r')
date
date()
Sys.Date()
version
source('~/Desktop/BP Wt Track/2020 Data/wt-2020-csv.r')
source('~/Desktop/BP Wt Track/2020 Data/bp-2020-csv.r')
win
df$POSIX[win]
df$lbs[win]
source('~/Desktop/BP Wt Track/2020 Data/wt-2020-csv.r')
source('~/Desktop/BP Wt Track/2020 Data/bp-2020-csv.r')
source('~/Desktop/BP Wt Track/2020 Data/wt-2020-csv.r')
source('~/Desktop/BP Wt Track/2020 Data/bp-2020-csv.r')
source('~/GitHub/PDQ/pdq-qnm-pkg/interfaces/R/pdq/demo/vmware.R')
source('~/GitHub/PDQ/PDQ 6.2/pdq/R/pdq/demo/cluster.R')
source('~/GitHub/PDQ/PDQ 6.2/pdq/R/pdq/demo/cluster.R')
source('~/GitHub/PDQ/PDQ 6.2/pdq/R/pdq/demo/cluster.R')
source('~/GitHub/PDQ/PDQ 6.2/pdq/R/pdq/demo/cluster.R')
source('~/GitHub/PDQ/PDQ 6.2/pdq/R/pdq/demo/elephant.R')
setwd("~/GitHub/PDQ/pdq-qnm-pkg/interfaces/R/pdq/demo")
source('~/GitHub/PDQ/pdq-qnm-pkg/interfaces/R/pdq/demo/mmm.R')
source('~/GitHub/PDQ/pdq-qnm-pkg/interfaces/R/pdq/demo/mmm.R')
date()
!!
date()
source('~/GitHub/PDQ/pdq-qnm-pkg/interfaces/R/pdq/demo/diskoptim.R')
